// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  SELLER
}

model User {
  id              Int       @id @default(autoincrement())
  name            String?   @db.VarChar(255)
  username        String    @unique @db.VarChar(100)
  password        String    @map("password_hash")
  role            Role      @default(SELLER)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  orders      Order[]

  @@map("users")
  @@index([username], name: "idx_users_username")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text

  products    Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  categoryId  Int       @map("category_id")
  price       Float     
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  category    Category  @relation(fields: [categoryId], references: [id])

  otderItems  OrderItem[]

  @@map("products")
  @@index([categoryId], name: "idx_products_category_id")
  @@index([name], name: "idx_products_name")
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  totalPrice  Float     @map("total_price")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id])

  orderItems  OrderItem[]

  receipts     Receipt[]

  @@map("orders")
  @@index([userId], name: "idx_orders_user_id")
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int       @map("order_id")
  productId   Int       @map("product_id")
  quantity    Int
  unitPrice   Float     @map("unit_price")
  totalPrice  Float?    @map("total_price")

  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@index([orderId], name: "idx_order_items_order_id")
  @@index([productId], name: "idx_order_items_product_id")
}

model Receipt {
  id            Int         @id @default(autoincrement())
  receiptNumber String      @unique @map("receipt_number")
  orderId       Int         @map("order_id")
  printedAt     DateTime?   @map("printed_at")
  printedData   Json

  order         Order       @relation(fields: [orderId], references: [id])

  @@map("receipts")
  @@index([orderId], name: "idx_receipts_order_id")
  @@index([receiptNumber], name: "idx_receipts_receipt_number")
}